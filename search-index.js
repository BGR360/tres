var searchIndex = JSON.parse('{\
"tres":{"doc":"Effortless, low overhead error tracing in Rust.","t":[12,13,8,3,13,4,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["0","Err","ErrorExt","Locations","Ok","Result","Trace","Traced","and","and_then","as_deref","as_deref_mut","as_mut","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cloned","cloned","cmp","contains","contains_err","copied","copied","default","empty","eq","eq","err","expect","expect_err","flatten","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_output","from_parts","from_residual","from_residual","hash","inner","into","into","into","into_err","into_inner","into_iter","into_ok","into_ok_or_err","into_parts","is_err","is_ok","iter","iter_mut","map","map","map_err","map_or","map_or_else","ne","ne","new","ok","or","or_else","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","trace","trace","trace","trace","traced","traced","transpose","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","0","0"],"q":["tres","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tres::Result",""],"d":["","Contains the error value","An extension trait applied to all untraced error types …","A simple vector of Rust code locations.","Contains the success value","A drop-in replacement for <code>core::result::Result</code> that …","A trait for types that store an error trace.","Wraps a generic error value and keeps track of an error …","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","","","","","","","","","","","","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","Returns <code>true</code> if the result is an <code>Ok</code> value containing the …","Returns <code>true</code> if the result is an <code>Err</code> value containing the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","","Wraps the given error and starts a new, empty trace.","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","Constructs a new <code>Traced</code> from an error value and a trace.","","","","Returns a reference to the contained error value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contained <code>Err</code> value, but never panics.","Returns the contained error value, consuming self and …","Returns a consuming iterator over the possibly contained …","Returns the contained <code>Ok</code> value, but never panics.","Returns the <code>Ok</code> value if <code>self</code> is <code>Ok</code>, and the <code>Err</code> value if …","Returns the contained error value and error trace, …","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Ok</code>.","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps a <code>Traced&lt;E, T&gt;</code> to <code>Traced&lt;F, T&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying a fallback function …","","","Wraps the given error and starts a new trace with the …","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","","","","","","Appends a code location to the error trace.","","","Returns a reference to the error trace.","Wraps self in a <code>Traced</code> and starts an error trace with the …","Wraps self in a <code>Traced</code> and starts an error trace with the …","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","","","","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","",""],"i":[1,2,0,0,2,0,0,0,2,2,2,2,2,2,1,3,2,1,3,2,2,1,3,2,2,1,3,2,2,2,2,2,2,2,2,1,3,1,2,2,2,2,2,1,1,3,3,2,1,3,3,3,3,2,2,2,2,3,2,2,2,3,1,3,2,2,3,2,2,2,3,2,2,2,2,3,2,2,2,2,1,2,3,2,2,2,2,1,3,2,1,3,4,1,3,3,5,5,2,1,3,2,1,3,2,1,3,2,2,2,2,2,2,2,2,6,7],"f":[null,null,null,null,null,null,null,null,[[["result",4]],["result",4]],[[],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["controlflow",4]],[[["",0]],["locations",3]],[[["",0]],["traced",3]],[[["",0]],["result",4]],[[["",0],["result",4]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],[[["",0],["result",4]],["ordering",4]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["locations",3]],[[]],[[["",0],["locations",3]],["bool",0]],[[["",0],["result",4]],["bool",0]],[[],["option",4]],[[["str",0]]],[[["str",0]]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["never",0]]],[[]],[[["traced",3]]],[[]],[[["result",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["result",4,[["infallible",4]]]],["result",4]],[[["result",4,[["infallible",4]]]],["result",4]],[[["",0],["",0]]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["fnonce",8]],["traced",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["",0],["locations",3]],["bool",0]],[[["",0],["result",4]],["bool",0]],[[]],[[],["option",4]],[[["result",4]],["result",4]],[[],["result",4]],[[["",0],["result",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0],["location",3]]],[[["",0],["location",3]]],[[["",0],["location",3]]],[[["",0]],["",0]],[[],["traced",3,[["",26,[["trace",8],["default",8]]]]]],[[],["traced",3,[["",26,[["trace",8],["default",8]]]]]],[[],["option",4,[["result",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null],"p":[[3,"Locations"],[4,"Result"],[3,"Traced"],[8,"Trace"],[8,"ErrorExt"],[13,"Ok"],[13,"Err"]]},\
"tres_result":{"doc":"This crate provides two things:","t":[13,13,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Err","Ok","Result","Trace","and","and_then","as_deref","as_deref_mut","as_mut","as_ref","borrow","borrow_mut","branch","clone","clone_from","clone_into","cloned","cloned","cmp","contains","contains_err","copied","copied","eq","err","expect","expect_err","flatten","fmt","from","from","from_iter","from_output","from_residual","from_residual","hash","into","into_err","into_iter","into_ok","into_ok_or_err","is_err","is_ok","iter","iter_mut","map","map_err","map_or","map_or_else","ne","ok","or","or_else","partial_cmp","to_owned","trace","transpose","try_from","try_into","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","0","0"],"q":["tres_result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tres_result::Result",""],"d":["Contains the error value","Contains the success value","A drop-in replacement for <code>core::result::Result</code> that …","A trait that enables return tracing for <code>Err</code> variants of …","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","","","","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","Returns <code>true</code> if the result is an <code>Ok</code> value containing the …","Returns <code>true</code> if the result is an <code>Err</code> value containing the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","Calls <code>U::from(self)</code>.","Returns the contained <code>Err</code> value, but never panics.","Returns a consuming iterator over the possibly contained …","Returns the contained <code>Ok</code> value, but never panics.","Returns the <code>Ok</code> value if <code>self</code> is <code>Ok</code>, and the <code>Err</code> value if …","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Ok</code>.","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying a fallback function …","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","","Called during <code>?</code> with the code location of the <code>?</code> invocation.","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","",""],"i":[1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,3,4],"f":[null,null,null,null,[[["result",4]],["result",4]],[[["fnonce",8]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["controlflow",4]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],[[["",0],["result",4]],["ordering",4]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0],["result",4]],["bool",0]],[[],["option",4]],[[["str",0]]],[[["str",0]]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["result",4]]],[[]],[[["intoiterator",8]],["result",4]],[[]],[[["result",4,[["infallible",4]]]]],[[["result",4,[["infallible",4]]]]],[[["",0],["",0]]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["fnonce",8]],["result",4]],[[["fnonce",8]],["result",4]],[[["fnonce",8]]],[[["fnonce",8],["fnonce",8]]],[[["",0],["result",4]],["bool",0]],[[],["option",4]],[[["result",4]],["result",4]],[[["fnonce",8]],["result",4]],[[["",0],["result",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0],["location",3]]],[[],["option",4,[["result",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[]],null,null],"p":[[4,"Result"],[8,"Trace"],[13,"Ok"],[13,"Err"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};